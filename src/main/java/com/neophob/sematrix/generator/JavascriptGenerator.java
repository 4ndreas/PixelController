/**
 * Copyright (C) 2011-2013 Michael Vogt <michu@neophob.com>
 *
 * This file is part of PixelController.
 *
 * PixelController is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PixelController is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PixelController.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.neophob.sematrix.generator;

import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.script.Invocable;
import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;

import com.neophob.sematrix.glue.Collector;
import com.neophob.sematrix.resize.Resize.ResizeName;

/**
 * the content is generated by an external js file.
 *
 * @author mvogt
 */
public class JavascriptGenerator extends Generator {

    /** The Constant RESIZE_TYP. */
    private static final ResizeName RESIZE_TYP = ResizeName.QUALITY_RESIZE;	

    private static final String JS_FILENAME = "generator.js";
    
    /** The Constant LOG. */
    private static final Logger LOG = Logger.getLogger(JavascriptGenerator.class.getName());

    private ScriptEngine engine;
    
    private IGenerator iGenerator;

    /**
     * Instantiates a new image.
     *
     * @param controller the controller
     * @param filename the filename
     */
    public JavascriptGenerator(PixelControllerGenerator controller) {
        super(controller, GeneratorName.JS_GEN1, RESIZE_TYP);
        ScriptEngineManager manager = new ScriptEngineManager();
        engine = manager.getEngineByName("JavaScript");

        InputStream input = Collector.getInstance().getPapplet().createInput(JS_FILENAME);
		if (input == null) {
			//we failed to find file
			LOG.log(Level.WARNING, "Failed to load {0}, File not found", new Object[] { JS_FILENAME });
			return;
		}

		Reader reader = null;
		try {
	        reader = new InputStreamReader(input);
	        engine.eval(reader);

	        Invocable inv = (Invocable) engine;
	        iGenerator = inv.getInterface(IGenerator.class);
	        
	        engine.put("buffer", internalBuffer);        			
		} catch (Exception e) {
			LOG.log(Level.WARNING, "Failed to initialize Javascript Generator!", e);
		} finally {
	        try {
				reader.close();
			} catch (IOException e) {
				LOG.log(Level.WARNING, "IOException!", e);
			}
	        try {
				input.close();
			} catch (IOException e) {
				LOG.log(Level.WARNING, "IOException!", e);
			}			
		}
    }

    /* (non-Javadoc)
     * @see com.neophob.sematrix.generator.Generator#update()
     */
    @Override
    public void update() {
    	iGenerator.update();
    }

    /* (non-Javadoc)
     * @see com.neophob.sematrix.generator.Generator#shuffle()
     */
    @Override
    public void shuffle() {
        //not implemented
    }



}
